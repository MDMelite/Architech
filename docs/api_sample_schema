--will also include relection--
AI2AI 1.3 â€” TO: Architect GPT  
TASK: Reconstruct current API schema documentation for Architectum GitHub Agent (from memory and previous interactions)

# API Schema: GitHub Agent (Port 8001)

This document outlines the public HTTP API for the GitHub Agent within the Architectum system. The agent supports structured file operations, plan creation, logging, GitHub interactions, and multi-agent orchestration via a command router.

Base URL: http://localhost:8001/ (local) or https://<codespace-id>-8001.app.github.dev/ (public Codespaces)

Endpoints:

1. GET /status  
Purpose: Simple health check  
Returns: { "status": "online" }

2. GET /whoami  
Purpose: Provides working directory, repo name, and docs directory presence  
Returns: { "repo": "architectum-system", "cwd": "/workspaces/architectum-system/github-agent", "docsDirExists": true }

3. POST /log  
Purpose: Appends entry to logs/orion.md  
Body: { "entry": "## [2025-04-21] GPT wrote this to the log" }  
Returns: { "status": "ok" }

4. POST /write-file  
Purpose: Write or overwrite a file relative to project root  
Body: { "path": "src/components/Hello.tsx", "content": "export const Hello = () => <div>Hello</div>;" }  
Returns: { "success": true }

5. POST /plan  
Purpose: Save a design plan into docs/  
Body: { "name": "scroll-engine-upgrade", "content": "## Plan\n\n- Add constants\n- Add hooks" }  
Returns: { "saved": true }

6. POST /create-pr  
Purpose: Create branch, commit file changes, and open PR  
Body: { "branch": "feature/scroll-hook", "title": "feat: add scroll hook", "body": "Closes #12", "changes": { "src/hooks/useScroll.ts": "export const useScroll = () => ..." } }  
Returns: { "url": "https://github.com/org/repo/pull/123" }

7. GET /files  
Purpose: List files or read content  
Query param: path (optional)  
Returns: { "files": ["file.md", "readme.md"] } or file content if path is a file

8. POST /command  
Purpose: Multi-command dispatcher (MCP)  
Body: { "command": "write_file", "args": { "path": "test.txt", "content": "abc" } }  
Supported commands: write_file, append_log, submit_plan, create_conversation, add_prompt, get_response, call_copilot  
Returns: Varies by command, wrapped in { "status": "ok" | "error": "..." }

9. GET /  
Purpose: Returns HTML UI for dashboard showing recent commands and status messages

10. GET /events (optional)  
Purpose: Server-sent events endpoint for real-time status updates (not yet finalized)

Notes:  
- File operations use project-root anchor via ROOT = Path(__file__).resolve().parents[1]  
- Commands use structured dispatch logic inside /command handler  
- Files and logs are saved directly to file system within architectum-system repo structure  
- GitHub integration requires environment-passed GITHUB_TOKEN and GITHUB_REPO  
- /plan and /log write into /docs and /logs respectively  
- /files reads from any valid project path  
- All endpoints assume POST content-type: application/json

Would you like this saved to docs/api_schema.md or used to regenerate the OpenAPI YAML schema?
